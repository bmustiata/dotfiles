#
# snippet: cs
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a comment section
#
snippet cs "Add a comment section" wm
// ///////////////////////////////////////////////////////
// ${1:Title}
// ///////////////////////////////////////////////////////
endsnippet

#
# snippet: foria
# w (word boundary),
# m (trim spaces on the right of the script)
# for i .. assigned
#
snippet foria "for i .. assigned" wm
for (let ${1:i} = 0; $1 < ${2:arr}.length; $1 += 1) {
	const ${3:item} = $2[$1];
	${0:}
}
endsnippet

#
# snippet: req
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a require
#
snippet ref "add a reference"
/// <reference path='${1:../../../typings/}${2:node}/$2.d.ts'/>
endsnippet

#
# snippet: vue
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a vue declaration
#
snippet vue "Add a vue declaration" wm
import Vue from 'vue'
import { Component, Provide, Prop, Emit, Watch } from 'vue-property-decorator'

@Component
export default class ${TM_FILENAME_BASE} extends Vue {
}
endsnippet

#
# snippet: mocha
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a mocha basic test
#
snippet mocha "Add a mocha basic test" wm
import * as chai from 'chai'

describe('${1:Class}', () => {
	it('${2:should work}', () => {
		${0:}
	})
})
endsnippet

#
# snippet: asserteq
# w (word boundary),
# m (trim spaces on the right of the script)
# Assert equals with chai
#
snippet asserteq "Assert equals with chai" wm
chai.assert.equal(${0:})
endsnippet

#
# snippet: assertf
# w (word boundary),
# m (trim spaces on the right of the script)
# Assert is false with chai
#
snippet assertf "Assert is false with chai" wm
chai.assert.isFalse(${0:})
endsnippet

