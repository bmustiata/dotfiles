#
# snippet: {
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a variable/whatevs
#
snippet { "Create a variable/whatevs" wm
{{ ${1:${VISUAL}} }}${0:}
endsnippet

#
# snippet: var
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a variable
#
snippet var "Create a variable" wm
{{ .Values.${0:replicaCount} }}
endsnippet

#
# snippet: with
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a with block
#
snippet with "Create a with block" wm
{{- with ${1:.Values.imagePullSecrets} }}
${0:${VISUAL}}
{{- end }}
endsnippet

#
# snippet: yaml
# w (word boundary),
# m (trim spaces on the right of the script)
# Serialize a variable to yaml
#
snippet yaml "Serialize a variable to yaml" wm
{{- toYaml ${1:.}${2/.+/ | nindent /}${2:8} }}
endsnippet

#
# snippet: inc
# w (word boundary),
# m (trim spaces on the right of the script)
# include
#
snippet inc "include" wm
{{ include "${1:persistent-postgresql.fullname}" .${2/.+/ | indent /}${2:4} }}
endsnippet

#
# snippet: if
# w (word boundary),
# m (trim spaces on the right of the script)
# Create an if condition
#
snippet if "Create an if condition" wm
{{- if ${1:.Values.ingress.enabled} }}
	${0:${VISUAL}}
{{- end }}
endsnippet

#
# snippet: ifi
# w (word boundary),
# m (trim spaces on the right of the script)
# Creat an inline if
#
snippet ifi "Creat an inline if" wm
{{ if ${1:.Values.ingress.enabled} }}${0:${VISUAL}}{{ end }}
endsnippet

#
# snippet: for
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a range
#
snippet for "Create a range" wm
{{- range ${1:.Values.items} }}
	- {{ . }}
{{- end }}
endsnippet

#
# snippet: def
# w (word boundary),
# m (trim spaces on the right of the script)
# Default value
#
snippet def "Default value" wm
default "${1:value}"
endsnippet

#
# snippet: q
# w (word boundary),
# m (trim spaces on the right of the script)
# quot
#
snippet q "quote" wm
quote
endsnippet

#
# snippet: b64
# w (word boundary),
# m (trim spaces on the right of the script)
# Encode as base64
#
snippet b64 "Encode as base64" wm
{{b64enc ${1:.Values.database.jdbc}}}
endsnippet

#
# snippet: nsget
# w (word boundary),
# m (trim spaces on the right of the script)
# Get the current namespace
#
snippet nsget "Get the current namespace" wm
{{ .Release.Namespace }}
endsnippet

