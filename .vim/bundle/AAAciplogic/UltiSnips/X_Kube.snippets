#
# snippet: pod
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a new pod
#
snippet pod "Create a new pod" wm
apiVersion: v1
kind: Pod
metadata:
	name: ${1:hello-pod}
	labels:
		${0:app: prod}
spec:
	containers:
	- name: ${2:container-name}
		image: ${3:ubuntu}${4/.+/
		ports:
		- containerPort: /}${4:8080}
endsnippet

#
# snippet: rs
# w (word boundary),
# m (trim spaces on the right of the script)
# replica set
#
snippet rs "replica set" wm
apiVersion: apps/v1
kind: ReplicaSet
metadata:
	name: ${1:web-rs}
spec:
	replicas: ${2:8}
	selector:
		matchLabels:
			${3:app: hello-world}
	template:
		metadata:
			labels:
				$3
		spec:
			containers:
			- name: ${4:hello-ctr}
				image: ${5:nigelpoulton/k8sbook:latest}${6/.+/
				ports:
				- containerPort: /}${6:8080}
endsnippet

#
# snippet: service
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a service
#
snippet service "Create a service" wm
apiVersion: v1
kind: Service
metadata:
	name: ${1:hello-svc}
	labels:
		${4:app: hello-world}
spec:
	type: NodePort
	ports:
	- port: ${2:8080}
		nodePort: ${3:30001}
		protocol: TCP
	selector:
		${0:app: hello-world}
endsnippet

snippet rc "Add a replication controller"
apiVersion: v1
kind: ReplicationController
metadata:
	name: ${1:my-nginx}
spec:
	replicas: ${2:1}
	template:
		metadata:
			labels:
				${3:app: $1}
		spec:
			containers:
			- name: ${4:$1}
				image: ${5:$1}
				ports:
				- containerPort: ${6:80}
endsnippet

snippet kubeservice "Add a service"
apiVersion: v1
kind: Service
metadata:
	labels:
		name: ${2:$1}
	name: ${1:servicename}
spec:
	publicIPs: [${3:10.5.1.1}]
	ports:
		# port = container port
		- port: ${4:8080}
			nodePort: ${5:32000}
	# Label keys and values that must match in order to receive traffic for this service.
	selector:
		app: ${6:$1}
	# or NodeService
	type: ${7:LoadBalancer}
endsnippet

#
# snippet: volume
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a volume for a template.
#
snippet volume_host "Add a volume directly on the host for a pod." wm
volumes:
	- name: ${1:jenkins-home}
		hostPath:
			path: ${2:/var/jenkins_home}
endsnippet

#
# snippet: volume_longhorn
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a volume on longhorn.
#
snippet volume_longhorn "Add a volume on longhorn." wm
volumes:
	- name: ${1:volume-name}
		flexVolume:
			driver: "rancher.io/longhorn"
			fsType: "ext4"
			options:
				size: "2Gi"
				numberOfReplicas: "3"
				staleReplicaTimeout: "20"
				fromBackup: ""
endsnippet

#
# snippet: volume_config
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a config volume
#
snippet volume_config "Add a config volume" wm
volumes:
- name: ${1:config-demo-volume}
	configMap:
		name: ${2:config-object-name}${3/.+/
		items:
			- key: /}${3:log.level}${3/.+/
			  path: /}${0:${3/.+/level/}}
endsnippet

#
# snippet: volume_secret
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a secret volume
#
snippet volume_secret "Add a secret volume" wm
volumes:
- name: ${1:secret-demo-volume}
	secret:
		secretName: ${2:secret-name}
endsnippet

#
# snippet: volume_pvc
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a persistent volume claim module
#
snippet volume_pvc "Add a persistent volume claim module" wm
volumes:
- name: ${1:pvc-demo-volume}
	persistentVolumeClaim:
		claimName: ${2:pvc-claim}
endsnippet

#
# snippet: mount
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a mount for a container
#
snippet mount "Add a mount for a container" wm
volumeMounts:
- mountPath: ${1:/var/jenkins_home}
	name: ${2:jenkins-home}${3/.+/
	subPath: /}${3:subpath}
endsnippet

#
# snippet: nodeselect
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a node selector
#
snippet nodeselect "Create a node selector (containers sibling)" wm
nodeSelector:
	${1:kubernetes.io/hostname}: ${2:musbo01}
endsnippet


#
# snippet: deploy
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a deployment
#
snippet deploy "Create a deployment" wm
apiVersion: apps/v1
kind: Deployment
metadata:
	name: ${1:nginx-deployment}
	labels:
		${2:app: nginx}
spec:
	replicas: ${3:3}
	selector:
		matchLabels:
			${4:app: nginx}
	template:
		metadata:
			labels:
				$4
		spec:
			containers:
			- name: ${5:nginx}
				image: ${6:nginx:1.7.9}${7/.+/
				ports:
				- containerPort: /}${7:80}
endsnippet

#
# snippet: port
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a new NodePort into a service
#
snippet port "Add a new NodePort into a service" wm
- name: ${1: name}
	port: ${2:8080}
	nodePort: ${3:38080}${4/.+/
	targetPort: /}${4:$2}${5/.+/
	protocol: /}${5:TCP}
endsnippet

#
# snippet: env
# w (word boundary),
# m (trim spaces on the right of the script)
# Create environment variables for the container
#
snippet env "Create environment variables for the container" wm
env:
- name: ${1:YOLO_NAME}
	value: ${2:value}
endsnippet

#
# snippet: env_config
# w (word boundary),
# m (trim spaces on the right of the script)
# Create environment vars from the config map
#
snippet env_config "Create environment vars from the config map" wm
env:
- name: ${1:VAR_NAME}
	valueFrom:
		configMapKeyRef:
			name: ${2:config-name}
			key: ${3:password}
endsnippet

# inject secrets into the environment
snippet env_secret "Create environment variables from secret" wm
env:
- name: ${1:VAR_NAME}
	valueFrom:
		secretKeyRef:
			name: ${2:secret-name}
			key: ${3:password}
endsnippet

# ingress mapping
snippet ingress "Create an ingress mapping"
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
	name: ${1:nextcloud}${2/.+/
	namespace: /}${2:nextcloud}
spec:
	rules:
	- host: ${3:nextcloud.yolo}
		${4:http}:
			paths:
			- backend:
					serviceName: ${5:nextcloud}
					servicePort: ${6:http}
				path: ${7:/}
endsnippet

#
# snippet: secret
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a secret
#
snippet secret "Create a secret" wm
apiVersion: v1
kind: Secret
metadata:
	name: ${1:secret-name}
data:
	password: ${2:TEZUckAxbgo=}
endsnippet

#
# snippet: pv_host
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a persistent volume
#
snippet pv_host "Create a persistent volume" wm
kind: PersistentVolume
apiVersion: v1
metadata:
	name: ${1:task-pv-volume}
spec:
	storageClassName: ${2:local-demo}
	capacity:
		storage: ${3:2Mi}
	accessModes:
		- ${4:ReadOnlyMany}
	hostPath:
		path: "${5:/etc}"
endsnippet

#
# snippet: pvc
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a persistent volume claim
#
snippet pvc "Create a persistent volume claim" wm
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
	name: ${1:task-pv-claim}
spec:
	storageClassName: ${2:local-demo}
	accessModes:
	- ${3:ReadOnlyMany}
	resources:
		requests:
			storage: ${4:1Mi}
endsnippet
