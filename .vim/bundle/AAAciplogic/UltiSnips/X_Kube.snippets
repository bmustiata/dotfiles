#
# snippet: pod
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a new pod
#
snippet pod "Create a new pod" wm
apiVersion: v1
kind: Pod
metadata:
	name: ${1:hello-pod}
	labels:
		${0:zone: prod}
spec:
	containers:
	- name: ${2:container-name}
		image: ${3:ubuntu}${4/.+/
		ports:
		- containerPort: /}${4:8080}
endsnippet

#
# snippet: rs
# w (word boundary),
# m (trim spaces on the right of the script)
# replica set
#
snippet rs "replica set" wm
apiVersion: apps/v1
kind: ReplicaSet
metadata:
	name: ${1:web-rs}
spec:
	replicas: ${2:8}
	selector:
		matchLabels:
			${3:app: hello-world}
	template:
		metadata:
			labels:
				$3
		spec:
			containers:
			- name: ${4:hello-ctr}
				image: ${5:nigelpoulton/k8sbook:latest}${6/.+/
				ports:
				- containerPort: /}${6:8080}
endsnippet

#
# snippet: service
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a service
#
snippet service "Create a service" wm
apiVersion: v1
kind: Service
metadata:
	name: ${1:hello-svc}
	labels:
		${4:app: hello-world}
spec:
	type: NodePort
	ports:
	- port: ${2:8080}
		nodePort: ${3:30001}
		protocol: TCP
	selector:
		${0:app: hello-world}
endsnippet

snippet rc "Add a replication controller"
apiVersion: v1
kind: ReplicationController
metadata:
	name: ${1:my-nginx}
spec:
	replicas: ${2:1}
	template:
		metadata:
			labels:
				${3:app: $1}
		spec:
			containers:
			- name: ${4:$1}
				image: ${5:$1}
				ports:
				- containerPort: ${6:80}
endsnippet

snippet kubeservice "Add a service"
apiVersion: v1
kind: Service
metadata:
	labels:
		name: ${2:$1}
	name: ${1:servicename}
spec:
	publicIPs: [${3:10.5.1.1}]
	ports:
		# port = container port
		- port: ${4:8080}
			nodePort: ${5:32000}
	# Label keys and values that must match in order to receive traffic for this service.
	selector:
		app: ${6:$1}
	# or NodeService
	type: ${7:LoadBalancer}
endsnippet

#
# snippet: volume
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a volume for a template.
#
snippet volume_host "Add a volume directly on the host for a pod." wm
volumes:
	- name: ${1:jenkins-home}
	hostPath:
		path: ${2:/var/jenkins_home}
endsnippet

#
# snippet: volume_longhorn
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a volume on longhorn.
#
snippet volume_longhorn "Add a volume on longhorn." wm
volumes:
	- name: ${1:volume-name}
		flexVolume:
			driver: "rancher.io/longhorn"
			fsType: "ext4"
			options:
				size: "2Gi"
				numberOfReplicas: "3"
				staleReplicaTimeout: "20"
				fromBackup: ""
endsnippet

#
# snippet: mount
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a mount for a container
#
snippet mount "Add a mount for a container" wm
volumeMounts:
- name: ${1:jenkins-home}
	mountPath: ${2:/var/jenkins_home}
endsnippet

#
# snippet: nodeselect
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a node selector
#
snippet nodeselect "Create a node selector (containers sibling)" wm
nodeSelector:
	${1:kubernetes.io/hostname}: ${2:musbo01}
endsnippet


#
# snippet: deploy
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a deployment
#
snippet deploy "Create a deployment" wm
apiVersion: apps/v1
kind: Deployment
metadata:
	name: ${1:nginx-deployment}
	labels:
		${2:app: nginx}
spec:
	replicas: ${3:3}
	selector:
		matchLabels:
			${4:app: nginx}
	template:
		metadata:
			labels:
				$4
		spec:
			containers:
			- name: ${5:nginx}
				image: ${6:nginx:1.7.9}${7/.+/
				ports:
				- containerPort: /}${7:80}
endsnippet

#
# snippet: env
# w (word boundary),
# m (trim spaces on the right of the script)
# Create environment variables for the container
#
snippet env "Create environment variables for the container" wm
env:
- name: ${1:YOLO_NAME}
	value: ${2:value}
endsnippet
