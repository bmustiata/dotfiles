#
# Current date
#
snippet date "Adds the current date." i
`!p
import datetime

now = datetime.date.today()
snip.rv += "%04d-%02d-%02d" % (now.year, now.month, now.day)
`
endsnippet

#
# Current time
#
snippet time "Adds the current time" i
`!p
import datetime

now = datetime.datetime.now()
snip.rv += "%02d:%02d:%02d" % (now.hour, now.minute, now.second)
`
endsnippet

#
# Current folder.
#
snippet pwd "Adds the current folder" i
`!p
import os

snip.rv += os.getcwd()
`
endsnippet

snippet bm "Bogdan Mustiata" i
Bogdan Mustiata
endsnippet

snippet bme "Bogdan Mustiata <bogdan.mustiata@gmail.com>" i
Bogdan Mustiata <${1:bogdan.mustiata@gmail.com}>
endsnippet

snippet tstamp "Add a timestamp" i
`!p
import datetime

now = datetime.date.today()
snip.rv += "%04d.%02d.%02d-" % (now.year, now.month, now.day)
now = datetime.datetime.now()
snip.rv += "%02d:%02d:%02d" % (now.hour, now.minute, now.second)
`
endsnippet

#
# snippet: rescape
# w (word boundary),
# m (trim spaces on the right of the script)
# Escape the text under cursor as a regexp.
#
snippet resc "Escape the text under cursor as a regexp." wm
`!p

snip.rv += snip.v.text\
	.replace('\\', '\\\\')\
	.replace('/', '\\/')\
	.replace('(', '\\(')\
	.replace(')', '\\)')\
	.replace('{', '\\{')\
	.replace('}', '\\}')\
	.replace('[', '\\[')\
	.replace(']', '\\]')\
	.replace('.', '\\.')\
	.replace('?', '\\?')\
	.replace('\n', '\\n')

`
endsnippet

#
# snippet: htmlesc
# w (word boundary),
# m (trim spaces on the right of the script)
# Escape the current text as HTML
#
snippet htmlesc "Escape the current text as HTML" wm
`!p

snip.rv += snip.v.text\
	.replace('&', '&amp;')\
	.replace('<', '&lt;')\
	.replace('>', '&gt;')
`
endsnippet

#
# snippet: htmldecode
# w (word boundary),
# m (trim spaces on the right of the script)
# Decode the current HTML back into text.
#
snippet htmldecode "Decode the current HTML back into text." wm
`!p
snip.rv += snip.v.text\
	.replace('&amp;', '&')\
	.replace('&lt;', '<')\
	.replace('&gt;', '>')
`
endsnippet

#
# snippet: sescape
# w (word boundary),
# m (trim spaces on the right of the script)
# Escape the text under the cursor as a string.
#
snippet sesc "Escape the text under the cursor as a string." wm
`!p

snip.rv += '"' + snip.v.text\
	.replace('\\', '\\\\')\
	.replace('"', '\\"')\
	.replace('\n', '\\n')\
	+ '"'

`
endsnippet

#
# snippet: ssescape
# w (word boundary),
# m (trim spaces on the right of the script)
# Escape the text under the cursor as a string for use in the shell.
#
snippet ssesc "Escape the text under the cursor as a shell string." wm
`!p

snip.rv += '"' + snip.v.text\
	.replace('\\', '\\\\')\
	.replace('"', '\\"')\
	.replace('$', '\\$')\
	.replace('\n', '\\n')\
	+ '"'
`
endsnippet

#
# snippet: qesc
# w (word boundary),
# m (trim spaces on the right of the script)
# Escape the text under the cursor as a single quote string.
#
snippet qesc "Escape the text under the cursor as a single quote string." wm
`!p

snip.rv += "'" + snip.v.text\
	.replace('\\', '\\\\')\
	.replace("'", "\\'")\
	.replace('\n', '\\n')\
	+ "'"

`
endsnippet

#
# snippet: base64encode
# w (word boundary),
# m (trim spaces on the right of the script)
# Encode the text selected as base64
#
snippet base64encode "Encode the text selected as base64" wm
`!p
import base64

snip.rv += base64.b64encode(snip.v.text)
`
endsnippet

#
# snippet: base64decode
# w (word boundary),
# m (trim spaces on the right of the script)
# Decode the selected text from base64
#
snippet base64decode "Decode the selected text from base64" wm
`!p
import base64

snip.rv += base64.b64decode(snip.v.text)
`
endsnippet

#
# snippet: md5
# w (word boundary),
# m (trim spaces on the right of the script)
# Get the MD5 hash of the selected text
#
snippet md5 "Get the MD5 hash of the selected text" wm
`!p
import hashlib

snip.rv += hashlib.md5(snip.v.text).hexdigest()
`
endsnippet

#
# snippet: sha1
# w (word boundary),
# m (trim spaces on the right of the script)
# Get the SHA1 hash of the selected text
#
snippet sha1 "Get the SHA1 hash of the selected text" wm
`!p
import hashlib

snip.rv += hashlib.sha1(snip.v.text).hexdigest()
`
endsnippet

#
# snippet: sha256
# w (word boundary),
# m (trim spaces on the right of the script)
# Get the SHA256 hash of the selected text
#
snippet sha256 "Get the SHA256 hash of the selected text" wm
`!p
import hashlib

snip.rv += hashlib.sha256(snip.v.text).hexdigest()
`
endsnippet

#
# snippet: sha512
# w (word boundary),
# m (trim spaces on the right of the script)
# Get the SHA512 hash of the selected text
#
snippet sha512 "Get the SHA512 hash of the selected text" wm
`!p
import hashlib

snip.rv += hashlib.sha512(snip.v.text).hexdigest()
`
endsnippet

snippet test "Add a test check"
Hypothesis   : ${1:Assumption on why that happens}
Test         : ${2:How you're gonna test that assumption}
Test results : ${3:What did the test returned}
Conclusions  : ${0:}
endsnippet

