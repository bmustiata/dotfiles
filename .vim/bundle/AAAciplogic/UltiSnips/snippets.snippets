snippet snippet "Create a new snippet"
#
# snippet: $1
# w (word boundary),
# m (trim spaces on the right of the script)
# $2
#
snippet ${1:tab_expand} "${2:description}"${3/.+/ /}${3:wm}
${VISUAL}${0:}
`!p snip.rv = "endsnippet"`
endsnippet

snippet c "Adds a comment"
#
# ${VISUAL}${0:}
#
endsnippet


snippet cs "Adds a comment section"
#############################################################################
# ${VISUAL}${0:}
#############################################################################
endsnippet

snippet prio "Adds a priority section."
priority ${1:1}

${VISUAL}${0:}

priority ${2:0}
endsnippet

#
# snippet: v
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a simple variable around a selected text
#
snippet v "Create a simple variable around a selected text" wm
\${${1:1}:${2:${VISUAL/^$/var/}}}${0:}
endsnippet
snippet var "Create a simple variable around a selected text" wm
\${${1:1}:${2:${VISUAL/^$/var/}}}${0:}
endsnippet

#
# snippet: varvisual
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a variable around a text that will return that text.
#
snippet varvisual "Create a variable around a text that will return that text." wm
\${${1:1}:\${VISUAL/^$/${VISUAL/^$/var/}/}}${0:}
endsnippet

#
# wrapvar Adds a wrapped variable with a prefix and postfix
# that will be added only if the variable is defined.
#
snippet wrapvar "Adds a wrapped variable with a prefix and postfix." wm
`!p
if t[3] != "":
	snip.rv += '${' + t[1] + "/.+/"
else:
	snip.rv += ""
`${3:prefix}${3/.+/\/}/}\${${1:1}:${2:originalValue}}`!p
if t[4] != "":
	snip.rv += '${' + t[1] + "/.+/"
else:
	snip.rv += ""`${4:suffix}${4/.+/\/}/}${0:}
endsnippet

#
# wt Adds a text only if the wrapped variable matches.
# w (word boundary),
# m (trim spaces on the right of the script)
#
snippet wt "Adds a text only if the wrapped variable matches." i
\${${1:1}/.+/${VISUAL/([\\\/])/\\$1/g}/}${0:}
endsnippet

#
# wraptext Adds a text only if the wrapped variable matches.
# w (word boundary),
# m (trim spaces on the right of the script)
#
snippet wraptext "Adds a text only if the wrapped variable matches." i
\${${1:1}/.+/${VISUAL/([\\\/])/\\$1/g}/}${0:}
endsnippet

#
# snippet: wrapnottext
# w (word boundary),
# m (trim spaces on the right of the script)
# Adds a value if the wrapped variable does not match
#
snippet wrapnottext "Adds a value if the wrapped variable does not match" wm
\`!p snip.rv += "" if t[${1:1}] != "" else "${2:${VISUAL}}"`
endsnippet

#
snippet /matchval/ "Adds the value of a group match" r
\`!p snip.rv += match.group(${1:1})\`${0:}
endsnippet

snippet notre "Add a not regexp" i
^((?!${1:word}).)*$${0:}
endsnippet

#
# snippet: py
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a python code block
#
snippet py "Add a python code block" wm
\`!p
${VISUAL}${0:}
\`
endsnippet

#
# snippet: cd
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a snippet for documentation for the snippet.
#
snippet cd "Add a snippet for documentation for the snippet." wm
#
# snippet: ${1:snippetname}
# w (word boundary)
# m (trim spaces on the right of the script)
# ${2:Description of the snippet}
#
endsnippet

#
# snippet: pyparamseach
# w (word boundary),
# m (trim spaces on the right of the script)
# Iterate over parameters in a python block
#
snippet paramiter "Iterate over parameters in a python block" wm
\`!p
for ${1:arg} in map(lambda it: it.strip(), re.split("\s*,\s*", t[${2:1}])):
	if $1 != "":
		snip.rv += '    ' + $1 + '\n'
\`
endsnippet
