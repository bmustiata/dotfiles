snippet compose "Docker compose"
${1:registry}:
	image: ${2:$1}
	ports:
	 - ${3:5000}:${4:$3}
#    environment:
#    volumes:
#     - /tmp/data:/var/lib/registry
endsnippet

#
# snippet: service
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a service entry.
#
snippet service "Create a service entry." wm
- name: Make sure $1 is $2${3/yes/, and is enabled on restart/}.
  service: name=${1:ntp}${2/.+/ state=/}${2:started}${3/.+/ enabled=/}${3:yes}
endsnippet

#
# snippet: play
# w (word boundary),
# m (trim spaces on the right of the script)
# Create an ansible playbook
#
snippet play "Create an ansible playbook" wm
- name: ${1:Configure webserver with nginx}
  hosts: ${2:webservers}${3/.+/
  become: /}${3:True}${4/.+/
  gather_facts: /}${4:True}
  tasks:
    ${0:${VISUAL/^$/- name: install nginx
      apt: name=nginx update_cache=yes/}}
endsnippet


#
# snippet: probe_http
# w (word boundary),
# m (trim spaces on the right of the script)
# Waits for an HTTP server to be up
#
snippet probe_http "Waits for an HTTP server to be up" wm
- name: ${1:Wait until server is up}
  uri:
    url: ${2:{{ jenkins_base_url }}/}${3/.+/
    return_content: true/}
  register: response
  until: response.status == 200${3/.+/ and '/}${3:content}${3/.+/' in response.content/}
  delay: ${4:3}
  retries: ${5:100}
  changed_when: false
endsnippet

#
# snippet: when
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a when statement.
#
snippet when "Add a when statement." wm
when: ${1:result}|failed
endsnippet

#
# snippet: whenout
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a when statement that checks the output.
#
snippet whenout "Add a when statement that checks the output." wm
when: ${1:result}|failed or ${2:''} != $1.stdout
endsnippet

#
# snippet: whendist
# w (word boundary),
# m (trim spaces on the right of the script)
# Do a check in the distro
#
snippet whendist "Do a check in the distro" wm
when: ansible_facts['distribution'] == '${1:Ubuntu}' and ansible_facts['distribution_version'] == '${2:16.04}'
endsnippet

#
# snippet: register
# w (word boundary),
# m (trim spaces on the right of the script)
# Register a variable for the output
#
snippet reg "Register a variable for the output" wm
register: ${1:result}${2/.+/
ignore_errors: /}${2:True}
endsnippet

#
# snippet: getstdout
# w (word boundary),
# m (trim spaces on the right of the script)
# Gets the version of a program into a new variable.
#
snippet getstdout "Gets the stdout of a program into a new variable." wm
- name: ${1:Get docker version}
	shell: |
		${2:docker -v}
	register: ${3:result}
	ignore_errors: True
	changed_when: False

- name: ${4:Register the docker version fact.}
	set_fact: ${5:$3}='{{$3.stdout${6/.+/ | regex_replace("/}${6:^Docker version (.*?), build .*$}${6/.+/", "\\\\1")/}}}'
endsnippet

#
# snippet: -
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a new task
#
snippet - "Create a new task" wm
- name: ${1:}
  ${0:}
endsnippet

#
# snippet: docker
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a docker container
#
snippet docker "Create a docker container" wm
- name: ${1:Container Name}
	docker_container:
		name: ${2:node-firefox}
		image: ${3:germaniumhq/node-firefox}${4/.+/
		state: /}${4:unless-stopped}${4/.+/
		/}${5/.+/restart_policy: /}${5:always}${5/.+/
		/}${6/.+/volumes:
			- '/}${6:/host:/container:rw}${6/.+/'/}${7/.+/
		published_ports:
			- "/}${7:15902:5901}${7/.+/"/}${8/.+/
		links:
			- "/}${8:germanium-hub:hub}${8/.+/"/}${9/.+/
		env:
			/}${9:NODE_MAX_SESSION: '10'}
	register: ${10:firefox}_node
endsnippet

#
# snippet: rc
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a line into rc.local
#
snippet rc "Add a line into rc.local" wm
- name: Enable ${1:Jenkins} to start at bootup.
	lineinfile:
		dest: /etc/rc.local
		line: ${2:docker start jenkins}
endsnippet

#
# snippet: rcremove
# w (word boundary),
# m (trim spaces on the right of the script)
# Remove a line from rc.local
#
snippet rcremove "Remove a line from rc.local" wm
- name: Remove ${1:Jenkins} from starting at bootup.
	lineinfile:
		dest: /etc/rc.local
		line: ${2:docker start jenkins}
		state: absent
endsnippet

#
# snippet: inc
# w (word boundary),
# m (trim spaces on the right of the script)
# Include another ansible task list
#
snippet inc "Include another ansible task list" wm
- name: ${1:Do this or another}
	include${2:_tasks}: ${3:./install.yml}${4/.+/
	when: /}${4:result}
endsnippet

#
# snippet: apt
# w (word boundary),
# m (trim spaces on the right of the script)
# Install a package using apt
#
snippet apt "Install a package using apt" wm
- name: ${0:Install: $1 package from APT.}
  apt: name=${1:ntp}${2/.+/ update_cache=/}${2:yes}
endsnippet

#
# snippet: raw
# w (word boundary),
# m (trim spaces on the right of the script)
# Run a raw command on the server.
#
snippet raw "Run a raw command on the server." wm
- name: ${0:Run \`$1\`}
  raw: ${1:pwd}
endsnippet

#
# snippet: debug
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a debug statement for a specific task
#
snippet debug "Add a debug statement for a specific task" wm
  failed_when: False
  register: ${1:result}

- debug: var=$1

- fail:
endsnippet

#
# snippet: sh
# w (word boundary),
# m (trim spaces on the right of the script)
# Run a shell command
#
snippet sh "Run a shell command" wm
- name: "${1:name}"
	shell: |
		${VISUAL}${0:}${2/.+/
	when: /}${2:condition}
endsnippet

