snippet kuberc "Add a replication controller"
apiVersion: v1
kind: ReplicationController
metadata:
	name: ${1:my-nginx}
spec:
	replicas: ${2:1}
	template:
		metadata:
			labels:
				app: ${3:$1}
		spec:
			containers:
			- name: ${4:$3}
			  image: ${5:$3}
			  ports:
			  - containerPort: ${6:80}
endsnippet

snippet kubeservice "Add a service"
apiVersion: v1
kind: Service
metadata:
	labels:
		name: ${2:$1}
	name: ${1:servicename}
spec:
	publicIPs: [${3:10.5.1.1}]
	ports:
		# port = container port 
		- port: ${4:8080}
		  nodePort: ${5:32000}
	# Label keys and values that must match in order to receive traffic for this service.
	selector:
		app: ${6:$1}
	# or NodeService
	type: ${7:LoadBalancer}
endsnippet

snippet compose "Docker compose"
${1:registry}:
	image: ${2:$1}
	ports:
	 - ${3:5000}:${4:$3}
#    environment:
#    volumes:
#     - /tmp/data:/var/lib/registry
endsnippet

#
# snippet: ansible
# w (word boundary),
# m (trim spaces on the right of the script)
# Create an ansible playbook
#
snippet ansible "Create an ansible playbook" wm
- name: ${1:Configure webserver with nginx}
  hosts: ${2:webservers}${3/.+/
  become: /}${3:True}
  tasks:
    ${0:${VISUAL/^$/- name: install nginx
      apt: name=nginx update_cache=yes/}}
endsnippet

#
# snippet: service
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a service entry.
#
snippet service "Create a service entry." wm
- name: Make sure $1 is $2${3/yes/, and is enabled on restart/}.
  service: name=${1:ntp}${2/.+/ state=/}${2:started}${3/.+/ enabled=/}${3:yes}
endsnippet

#
# snippet: apt
# w (word boundary),
# m (trim spaces on the right of the script)
# Install a package using apt
#
snippet apt "Install a package using apt" wm
- name: ${0:Install: $1 package from APT.}
  apt: name=${1:ntp}${2/.+/ update_cache=/}${2:yes}
endsnippet

#
# snippet: raw
# w (word boundary),
# m (trim spaces on the right of the script)
# Run a raw command on the server.
#
snippet raw "Run a raw command on the server." wm
- name: ${0:Run \`$1\`}
  raw: ${1:pwd}
endsnippet

