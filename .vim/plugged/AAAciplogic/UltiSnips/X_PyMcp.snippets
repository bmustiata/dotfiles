#
# snippet: mcp
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a simple mcp server with STDIO transport
#
snippet mcp "Create a simple mcp server with STDIO transport" wm
from fastmcp import FastMCP

mcp = FastMCP("${1:Math}")

# $ fastmcp run server.py --host=...
# server arguments can be passed after --
# --transport -t  Transport protocol to use [choices: stdio, http, sse, streamable-http]                                                │
# --host          Host to bind to when using http transport (default: 127.0.0.1)                                                        │
# --port      -p  Port to bind to when using http transport (default: 8000)                                                             │
# --path          The route path for the server (default: /mcp/ for http transport, /sse/ for sse transport)                            │
# --log-level -l  Log level [choices: DEBUG, INFO, WARNING, ERROR, CRITICAL]                                                            │
# --no-banner     Don't show the server banner [default: False]                                                                         │


@mcp.tool()
${2/.+/async /}def add(a: int, b: int) -> int:
	"""Add two numbers"""
	return a + b


if __name__ == "__main__":
	mcp.run(transport="${2:streamable-http}`!p snip.rv += "" if t[2] != "" else """stdio"""`")
endsnippet


#
# snippet: mcp
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a tool to the mcp server
#
snippet tool "Define an mcp tool" wm
@mcp.tool()
${1:async }def ${2:name}(${3:request: str})${4/.+/ -> /}${4:str}:${5/.+/
	"""
	/}${5:documentation}${5/.+/
	"""/}
	${6:return "yay"}
endsnippet

