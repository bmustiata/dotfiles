#
# snippet: openai
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a basic OpenAI Project
#
snippet openai "Create a basic OpenAI Project" wm
import asyncio

from agents import Agent, Runner, function_tool, OpenAIChatCompletionsModel
from openai import AsyncOpenAI
from openai.types.responses import ResponseTextDeltaEvent


@function_tool
def get_weather(city: str) -> str:
	return f"sunny"


local_client = AsyncOpenAI(
	base_url="http://gmktek:8000/v1/",
	api_key="1",
)

local_model = OpenAIChatCompletionsModel(
	model="gpt-4.1",
	openai_client=local_client,
)

agent = Agent(
	name="Hello world",
	instructions="You are a helpful agent.",
	tools=[get_weather],
	model=local_model,
)


async def main():
	result = Runner.run_streamed(agent, input="What's the weather in Tokyo?")
	async for event in result.stream_events():
		if event.type == "raw_response_event" and isinstance(event.data, ResponseTextDeltaEvent):
			print(event.data.delta, end="", flush=True)

	# The weather in Tokyo is sunny.


if __name__ == "__main__":
	asyncio.run(main())
endsnippet

#
# snippet: agent
# w (word boundary),
# m (trim spaces on the right of the script)
# Create an OpenAI Agent
#
snippet agent "Create an OpenAI Agent" wm
${1:agent} = Agent(
	name="${2:Agent Name}",
	instructions=${3:"You are a helpful agent."}${4/.+/,
	tools=[/}${4:get_weather}${4/.+/]/},
	model=${5:local_model},
)
endsnippet

#
# snippet: model
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a local model
#
snippet model "Create a local model" wm
${1:local_client} = AsyncOpenAI(${2/.+/
	base_url=/}${2:"http://gmktek:8000/v1/"}${2/.+/,/}${3/.+/
	api_key=/}${3:"must-exist-or-api-throws"}${3/.+/,/}
)

${4:local_model} = OpenAIChatCompletionsModel(
	model=${5:"gpt-4.1"},
	openai_client=$1,
)
endsnippet

#
# snippet: run
# w (word boundary),
# m (trim spaces on the right of the script)
# Run a prompt against an agent, get the output as string
#
snippet run "Run a prompt against an agent, get the output as string" wm
${1:result} = await Runner.run(${2:weather_agent}, input=${3:"What's the weather in Tokyo?"})
print($1.final_output)
endsnippet

#
# snippet: runs
# w (word boundary),
# m (trim spaces on the right of the script)
# Run a prompt against an agent, but get the output streaming
#
snippet runs "Run a prompt against an agent, but get the output streaming" wm
${1:result} = Runner.run_streamed(${2:weather_agent}, input=${3:"What's the weather in Tokyo?"})
async for ${4:event} in $1.stream_events():
	if $4.type == "raw_response_event" and isinstance($4.data, ResponseTextDeltaEvent):
		print($4.data.delta, end="", flush=True)
endsnippet

#
# snippet: def
# w (word boundary),
# m (trim spaces on the right of the script)
# Define a method or function
#
snippet tool "Define a tool" wm
@function_tool
def ${1:name}(${2:params})${3/.+/ -> /}${3:None}:${4/.+/
	"""
	/}${4:documentation}${4/.+/
	"""/}
	${5:pass}
endsnippet

