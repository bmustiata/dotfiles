snippet c "Multi line comment"
/**
 * ${1:}
 */
endsnippet

snippet fori "for i ..."
for (${1:i} = 0; i < ${2:max}; i++)
{
	${3:}
}
endsnippet

snippet in "include"
#include ${1:"}${2:stdio.h}`!p snip.rv += ">" if t[1] == "<" else '"'`
endsnippet

#
# snippet: main
# w (word boundary),
# m (trim spaces on the right of the script)
# main function
#
snippet main "main function" wm
int main(int argc, const char * argv[]) {
	${VISUAL}${0:}
	return 0;
}
endsnippet

#
# snippet: struct
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a struct definition
#
snippet struct "Create a struct definition" wm
typedef struct {
	${0:}
} ${1:StructName};
endsnippet

#
# snippet: fun
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a new function
#
snippet f "Create a new function" wm
${1:void} ${2:FunctionName}(${3:params}) {
	${0:}
}
endsnippet

#
# snippet: m
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a new method
#
snippet m "Create a new method" wm
${1:void} ${2:Clazz}_${3:FunctionName}($2* _this${4/.+/, /}${4:params}) {
	${0:}
}
endsnippet

#
# snippet: h
# w (word boundary),
# m (trim spaces on the right of the script)
# create a header definition
#
snippet h "create a header definition" wm
#ifndef __${1:header_name}
#define __$1

${VISUAL}${0:}

#endif
endsnippet

#
# snippet: l
# w (word boundary),
# m (trim spaces on the right of the script)
# log the current line
#
snippet l "log the current line" wm
printf("`!p
snip.rv += snip.fn
snip.rv += ":"
snip.rv += str(snip.buffer.cursor.line)
`${1/.+/ - /}${1:description}\n"${2:});
endsnippet

#
# snippet: x
# w (word boundary),
# m (trim spaces on the right of the script)
# debug things
#
snippet x "debug things" wm
// `!p
snip.rv += str(dir(snip.ft))
`
endsnippet

#
# snippet: le
# w (word boundary),
# m (trim spaces on the right of the script)
# leave the function
#
snippet le "leave the function"
xd_return("${1:function_name}"${2/.+/, /}${2:${VISUAL}})
endsnippet

