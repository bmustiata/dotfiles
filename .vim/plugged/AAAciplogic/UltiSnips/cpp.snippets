snippet c "Multiline comment"
/**
 * ${1:}
 */
endsnippet

snippet ifdef "Create an #ifdef statement"
#ifdef ${1:NAME}
	${2:}
#endif // $1
endsnippet

snippet def "Create a #define statement"
#define ${1:NAME}
endsnippet

snippet ifndef "Create a #define statement if an ifndef is present."
#ifndef ${1:NAME}
	${2:}
#endif // not $1
endsnippet

snippet br "Create a big comment block to show a different section"
/////////////////////////////////////////////////////////////////////////////
//// ${1:}
/////////////////////////////////////////////////////////////////////////////
endsnippet

snippet if "Add an if"
if (${1:condition}) {
	${0:}
}
endsnippet

snippet #in "#include a header"
#include ${1:<}${2:iostream}`!p
if t[1] == "<":
	snip.rv += ">"
else:
	snip.rv += '"'
`
endsnippet

#
# snippet: warn_disable
# w (word boundary),
# m (trim spaces on the right of the script)
# Disable GCC warning
#
snippet warn_disable "Disable GCC warning" wm
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-W${1:unused-parameter}"
${VISUAL}
#pragma GCC diagnostic pop
endsnippet


#
# snippet: log
# w (word boundary),
# m (trim spaces on the right of the script)
# log potatoes
#
snippet log "log potatoes" wm
write_to_log(0, "${1:time to get errors}");
endsnippet

#
# snippet: for
# w (word boundary),
# m (trim spaces on the right of the script)
# for int i...
#
snippet for "for int i..." wm
for (${1:int} ${2:i} = 0; $2 < ${3:10}; $2++) {
	${VISUAL}${0:}
}
endsnippet

#
# snippet: namespace
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a namespace
#
snippet namespace "Add a namespace" wm
namespace ${1:X}
{
${VISUAL}${0:}
} // $1
endsnippet

#
# snippet: h
# w (word boundary),
# m (trim spaces on the right of the script)
# create a header include
#
snippet h "create a header include" wm
#ifndef ${1:__X}
#define $1

${VISUAL}${0:}

#endif  // ifndef $1
endsnippet
