#
# snippet: public
# w (word boundary),
# m (trim spaces on the right of the script)
# Make the current package public
#
snippet public "Make the current package public" wm
package(default_visibility = ["PUBLIC"])
endsnippet

#
# snippet: gen
# w (word boundary),
# m (trim spaces on the right of the script)
# genrule
#
snippet genrule "genrule" wm
genrule(
	name=${1:"targetname"},
	cmd="${2:""}${2/.+/
		/}${3:cat $SRCS_BIN > $OUTS_BIN}${2/.+/
	""/}",
	srcs=${4/.+/{
		"/}${4:srcs}${4/.+/": /}${5:["input.py"]}${4/.+/,
	}/},
	outs=${6/.+/{
		"/}${6:bin}${6/.+/": /}${7:["input.pyc"]}${6/.+/,
	}/}${8/.+/,
	deps=[
		/}${8:"//some/dep",}${8/.+/
	]/}${9/.+/,
	binary=/}${9:True}${10/.+/,
	output_is_complete=/}${10:True}${11/.+/,
	test_only=/}${11:True}${12/.+/,
	secrets={
		/}${12:"AUTHKEY": "~/auth",}${12/.+/
	}/}${13/.+/,
	tools={
		/}${13:"JAVAC": "//path/to:tool",}${13/.+/
	}/}${14/.+/,
	output_dirs=[
		/}${14:"target",}${14/.+/
	]/},
)
endsnippet

#
# snippet: pybin
# w (word boundary),
# m (trim spaces on the right of the script)
# Generate a python_binary
#
snippet pybin "Generate a python_binary" wm
ge_python_console_binary(
  name="${1:generate_dockerfile}",
${2/.+/  srcs=glob([
    "/}${2:oaas}${2/.+/\/**\/*.py",
  ]),
/}  main="${3:$1.py}",
${4/.+/  deps=[
    /}${4:"//build/thirdparty/python:click",}${4/.+/
  ],
/})
endsnippet

#
# snippet: pylib
# w (word boundary),
# m (trim spaces on the right of the script)
# Generate a python_library
#
snippet pylib "Generate a python_library" wm
ge_python_library(
  name="${2:$1-lib}",
  srcs=glob([
    "${1:oaas}/**/*.py",
  ]),
${3/.+/  deps=[
    "/}${3://build/thirdparty/python:redis}${3/.+/",
  ],
/})
endsnippet


#
# snippet: pip
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a pip dependency
#
snippet pip "Create a pip dependency" wm
ge_pip_library(
	name="${1:click}",
	version="${2:7.1.2}",
)
endsnippet


#
# snippet: pip
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a pip dependency
#
snippet gepip "Create a pip dependency" wm
ge_pip_library(
	name="${1:termcolor}",
	version="${2:1.1.0}",
)
endsnippet


#
# snippet: gepyimage
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a germanium pyhton image
#
snippet gepyimg "Create a germanium pyhton image" wm
ge_python_image(
	name="${1:termcolor-util-image}",
${2/.+/  deps=[
		"/}${2::termcolor-util}"${2/.+/,
	],
/}${3/.+/  srcs=[
		"/}${3:termcolor_util/__init__.py}${3/.+/",
	],
/}  main="${4:termcolor_util/__main__.py}",
)
endsnippet

#
# snippet: java
# w (word boundary),
# m (trim spaces on the right of the script)
# Load germanium java please steps
#
snippet java "Load germanium java please steps" wm
subinclude("${1:@gbs}//toolchain/java:java.plz")
endsnippet

#
# snippet: node
# w (word boundary),
# m (trim spaces on the right of the script)
# Load germanium node please steps
#
snippet node "Load germanium node please steps" wm
subinclude("${1:@gbs}//toolchain/node:node.plz")
endsnippet

#
# snippet: golang
# w (word boundary),
# m (trim spaces on the right of the script)
# Load germanium python please steps
#
snippet golang "Load germanium golang please steps" wm
subinclude("${1:@gbs}//toolchain/golang:golang.plz")
endsnippet

#
# snippet: python
# w (word boundary),
# m (trim spaces on the right of the script)
# Load germanium python please steps
#
snippet python "Load germanium python please steps" wm
subinclude("${1:@gbs}//toolchain/python:python.plz")
endsnippet

#
# snippet: dev
# w (word boundary),
# m (trim spaces on the right of the script)
# Load germanium python please steps
#
snippet dev "Load germanium dev please steps" wm
subinclude("@gbs//dev:dev.plz")
endsnippet

#
# snippet: sub
# w (word boundary),
# m (trim spaces on the right of the script)
# Add a subinclude
#
snippet sub "Add a subinclude" wm
subinclude("${1://build/please:python.plz}")
endsnippet


#
# snippet: gepylib
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a germanium python library
#
snippet gepylib "Create a germanium python library" wm
ge_python_library(
  name="${1:termcolor-util}",
  deps=[
    "${2://build/thirdparty/python:termcolor}",
  ],
  srcs=glob(["${3:termcolor_util}/**/*.py"]),
)
endsnippet


#
# snippet: cs
# w (word boundary),
# m (trim spaces on the right of the script)
# Comment section
#
snippet cs "Comment section" wm
###########################################################
# ${1:title}
###########################################################
endsnippet

#
# snippet: file
# w (word boundary),
# m (trim spaces on the right of the script)
# Export a file from the package
#
snippet file "Export a file from the package" wm
filegroup(
  name="${1:node.plz}",
  srcs=[
    "${2:$1}",
  ],
)
endsnippet

#
# snippet: helm
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a helm rule
#
snippet helm "Create a germanium helm rule" wm
subinclude("//_build/helm:helm.plz")

helm_template(
  name="${1:goal-place-chart}",
  deps=[
    "${2://goal-place/gp-web:frontend}",${0:}
  ],
)
endsnippet

#
# snippet: watch
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a dev rule
#
snippet watch "Create a dev rule to watch for changes" wm
${1:subinclude("@gbs//dev:dev.plz")}${1/.+/

/}ge_dev_watch(
  name="${2:dev}",
  deps=[
    "${3://goal-place/gp-web:frontend-dev}",${0:}
  ],
)
endsnippet

#
# snippet: docker
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a docker image rule
#
snippet docker "Create a docker image rule" wm
${1:subinclude("///pleasings//docker")}${1/.+/

/}docker_image(
  name="${2:registry-image}",
  srcs=[${3:":registry"}],
  dockerfile="${4:Dockerfile}",
)
endsnippet


#
# snippet: devrun
# w (word boundary),
# m (trim spaces on the right of the script)
# Run something when developing this app
#
snippet devrun "Run something when developing this app" wm
${1:subinclude("@gbs//dev:dev.plz")}${1/.+/

/}ge_dev_run(
  name="${2:dev-time}",
  cmd="""
    ${3:$(out_exe :time-server)}
  """${4/.+/,
  deps=[/}${4:""}${4/.+/]/}${5/.+/,
  srcs=[/}${5:""}${5/.+/]/}${6/.+/,
  restart_on_changes=/}${6:True}${6/.+/,
/})
endsnippet

#
# snippet: gbs
# w (word boundary),
# m (trim spaces on the right of the script)
# description
#
snippet gbs "description" wm
subrepo(
	name="gbs",
	path="/home/raptor/projects/gbs/",
)
endsnippet

#
# snippet: gobin
# w (word boundary),
# m (trim spaces on the right of the script)
# create a go console binary
#
snippet gobin "create a go console binary" wm
ge_golang_console_binary(
  name="${1:binary-name}",
  srcs=glob([
    "**/*.go",
  ]),${2/.+/
  deps=[
    /}${2:"//deps",}${2/.+/
  ],/}${3/.+/
  static=/}${3:False},
)
endsnippet


#
# snippet: gomod
# w (word boundary),
# m (trim spaces on the right of the script)
# create a go module
#
snippet gomod "create a go module" wm
ge_golang_module(${2/.+/
  name=/}"${1:module-name}"${2/.+/,
  srcs=glob([
    /}${2:"**/*.go",
    "go.mod",}${2/.+/
  ]),
/})
endsnippet

#
# snippet: jar
# w (word boundary),
# m (trim spaces on the right of the script)
# Create a standalone jar file
#
snippet jar "Create a standalone jar file" wm
ge_java_maven_fatjar(
	name="${1:jmx-test-server}",
	maven_jar="target/${2:$1}*.jar",
)
endsnippet

#
# snippet: ide
# w (word boundary),
# m (trim spaces on the right of the script)
# Add an IDE generation
#
snippet ide "Add an IDE generation" wm
subinclude("@gbs//_internal/ide/core:ide.plz")

_ge_ide_workspace(
	name="ide-workspace",
	modules=[
		"//_internal/ide-modules:_arg_parser#ide-module",
	],
	toolchains=[
		"@gbs//toolchain/golang:golang",
	],
)

_ge_ide_generate(
	name="ide",
	workspace=":ide-workspace",
)

endsnippet
