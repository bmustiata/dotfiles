from graphql.type import GraphQLResolveInfo
from typing import Any, AsyncGenerator
import ariadne
import ariadne.asgi
import asyncio
import os

type_defs = ariadne.load_schema_from_path("domain.gql")
query = ariadne.QueryType()
subscription = ariadne.SubscriptionType()


@query.field("domains")
def resolve_domains(*_):
    return [
        {"host": "a"},
        {"host": "b"},
        {"host": "c"},
    ]


@subscription.source("counter")
async def counter_generator(
    obj: Any, info: GraphQLResolveInfo
) -> AsyncGenerator[int, None]:
    for i in range(5):
        await asyncio.sleep(1)
        yield i


@subscription.field("counter")
def counter_resolver(count: int, info: GraphQLResolveInfo) -> int:
    return count + 1


debug_mode = os.getenv("SERVER_MODE") != "production"
schema = ariadne.make_executable_schema(type_defs, query, subscription)
app = ariadne.asgi.GraphQL(schema, debug=debug_mode)
