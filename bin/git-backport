#!/usr/bin/env python

import subprocess
import re
import sys

from git_utils import find_branch_by_issue_id, \
                      get_branch_name_for_different_version, \
                      all_branches, \
                      get_commits_for_branch, \
                      get_base_branch

issue_id = None
from_version = None
to_version = None

if len(sys.argv) > 3:
    issue_id = sys.argv[1]
    from_version = sys.argv[2]
    to_version = sys.argv[3]
else:
    issue_id = sys.argv[1]
    from_version = "develop"  # FIXME master?
    to_version = sys.argv[2]


def print_usage():
    print("""
    You need to call it like this:

    git backport [-sp|--single-patch] [-ib|--ignore-branch] ISSUE-ID [FROM_VERSION] TO_VERSION

    This will take care of everything that's needed for the backport.
    If the FROM_VERSION is missing, it assumes there is a branch
     targeted for merging in develop/master.
""")

from_branch = find_branch_by_issue_id(from_version, issue_id)
to_branch = get_branch_name_for_different_version(from_branch, to_version)

if to_branch in all_branches():
    raise Exception("Branch %s already exists." % to_branch)

commits_to_apply = list(reversed(get_commits_for_branch(from_branch, issue_id)))

print("Going to try:")
print("====================================================================================")
print("git checkout -b %s %s" % (to_branch, get_base_branch(to_version)))
for commit in commits_to_apply:
    print("# %s" % commit.message)
    print("git cherry-pick %s" % commit.hash)
print("git push --set-upstream origin %s" % to_branch)
print("====================================================================================")

raw_input("Press Enter to continue...")

print("git checkout -b %s %s" % (to_branch, get_base_branch(to_version)))
subprocess.check_call(["git", "checkout", "-b", to_branch, get_base_branch(to_version)])

for commit in commits_to_apply:
    print("# %s" % commit.message)
    print("git cherry-pick %s" % commit.hash)
    subprocess.check_call(["git", "cherry-pick", commit.hash])

subprocess.check_call(["git", "push", "--set-upstream", "origin", to_branch])

print("DONE")
