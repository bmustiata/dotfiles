#!/usr/bin/env python3

import adhesive
import os
import shlex


class Data:
    current_ip: str

    cn: str
    company_name: str
    country: str

    certificate_file: str
    key_file: str

    java_keystore_file: str
    java_key_alias: str
    java_keystore_password: str
    java_key_password: str


@adhesive.task('Find current IP')
def find_current_ip(token: adhesive.Token[Data]):
    ip = token.workspace.run_output("hostname -I").strip().split(" ")[0]
    token.data.current_ip = ip


@adhesive.usertask('Certificate Details')
def certificate_details(token: adhesive.Token[Data], ui: adhesive.UI):
    ui.add_input_text(
        "cn",
        title="CN",
        value=f"*.yolo.{token.data.current_ip}.xip.io")
    ui.add_input_text(
        "company_name",
        title="Company",
        value="Bamboozle Technologies LTD.")
    ui.add_input_text(
        "country",
        title="Country",
        value="AT")

    ui.add_input_text(
        "certificate_file",
        title="CRT",
        value="yolo.crt")
    ui.add_input_text(
        "key_file",
        title="Key",
        value="yolo.key")

    ui.add_input_text(
        "java_keystore_file",
        title="Java Keystore File",
        value="yolo.p12")
    ui.add_input_password(
        "java_keystore_password",
        title="Java Keystore Password",
        value="")
    ui.add_input_text(
        "java_key_alias",
        title="Java Key Alias",
        value="jetty")
    ui.add_input_password(
        "java_key_password",
        title="Java Key Password",
        value="")

@adhesive.task('Create Certificate')
def apt_install(token: adhesive.Token[Data]):
    data = token.data

    token.workspace.pwd = os.curdir
    token.workspace.run(f"""
        openssl req -newkey rsa:4096 \\
                -x509 \\
                -sha256 \\
                -days 3650 \\
                -nodes \\
                -out {data.certificate_file} \\
                -keyout {data.key_file} \\
                -subj '/CN={data.cn}/O={data.company_name}/C={data.country}' \\
                -addext 'subjectAltName = DNS:awi.{data.cn}'
    """)

    if not token.data.java_keystore_file:
        return

    token.workspace.run(f"""
        openssl pkcs12 -export \\
                -in {data.certificate_file} \\
                -inkey {data.key_file} \\
                -name {shlex.quote(data.java_key_alias)} > _server.p12

        keytool -importkeystore \\
                -srckeystore _server.p12 \\
                -destkeystore {shlex.quote(data.java_keystore_file)} \\
                -srcstoretype pkcs12 \\
                -alias {shlex.quote(data.java_key_alias)}

        rm _server.p12

#        keytool -importpass \\
#                -alias {shlex.quote(data.java_key_alias)} \\
#                -file {shlex.quote(data.key_file)} \\
#                -keystore {shlex.quote(data.java_keystore_file)} \\
#                -storepass {shlex.quote(data.java_keystore_password)} \\
#                -keypass {shlex.quote(data.java_key_password)} \\
#                -storetype PKCS12 \\
#                -noprompt
    """)

adhesive.build()
